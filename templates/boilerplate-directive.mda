import java.util.*
import in.labulle.anycode.uml.*
import in.labulle.anycode.engine.groovy.directive.*

class Boilerplate {

	static String SEMANTIC_UI = "semanticui",
		BOOTSTRAP = "bootstrap4"
	IClassifier c;
	List<IAttribute> attributes;
	List<IAttribute> listAttributes;

	String f;

	def setup(IClassifier c, String framework) {
		this.c = c;
		this.f = framework;
		this.attributes = new ArrayList<IAttribute>()
		this.listAttributes = new ArrayList<IAttribute>()

		c.attributes.each {
			if (!it.isRelation() || !it.name.isEmpty() && it.isOneToOne())
				attributes.push(it)

			else if (it.isRelation() && it.isOneToMany())
				listAttributes.push(it)
		}

		String imports = ""
		imports += print("<link rel='stylesheets' href='https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css' />")

		if(f == BOOTSTRAP) {
			imports += print(1, "<link rel='stylesheets' href='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta/css/bootstrap.css' />")
			imports += print(1, "<link rel='stylesheets' href='https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css' />")
		} else if(f == SEMANTIC_UI) {
			imports += print(1, "<link rel='stylesheets' href='https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/semantic.min.css' />")
			imports += print(1, "<link rel='stylesheets' href='https://cdn.datatables.net/1.10.16/css/dataTables.semanticui.min.css' />")
		}

		return imports.substring(0, imports.length() - 1)
	}

	def setup(IClassifier c) {
		setup(c, "")
	}

	def tableHtml() {
		String tableClasses = f == BOOTSTRAP? "table table-striped table-bordered" :
								f == SEMANTIC_UI? "ui celled table" : ""

		String tableHeader = openTag(3, "tr")
		String placeholder = openTag(3, "tr")

		attributes.plus(listAttributes).each {
			String content = it.dataType.name == "String"? "Placeholder" :
							it.dataType.name == "int"? "123" :
							it.dataType.name == "double"? "12,3" : "List&lt;${it.name.capitalize()}&gt;"

			placeholder += print(4, "<td>${content}</td>")

			tableHeader += print(4, "<th>${it.name.capitalize()}</th>")
		}

		placeholder += closeTag(3, "tr")
		tableHeader += closeTag(3, "tr")


		String result = print(1, "<h1>DataTable using ${f}</h1>")

		result += openTag(1, "table", "id='${c.name.toLowerCase()}-form' class='${tableClasses}' cellspacing='0' width='100%'")

		result += openTag(2, "thead")
		result += print(tableHeader)
		result += closeTag(2, "thead")

		result += openTag(2, "tfoot")
		result += print(tableHeader)
		result += closeTag(2, "tfoot")

		result += openTag(2, "tbody")
		result += print(placeholder)
		result += closeTag(2, "tbody")

		result += closeTag(1, "table")

		return result
	}

	def tableJs() {
		String imports = print(1, "<script src='https://code.jquery.com/jquery-3.2.1.min.js'></script>")
		imports += print(1, "<script src='https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js'></script>")

		if(f == BOOTSTRAP)
			imports += print(1, "<script src='https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js'></script>")
		else if(f == SEMANTIC_UI) {
			imports += print(1, "<script src='https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/semantic.min.js'></script>")
			imports += print(1, "<script src='https://cdn.datatables.net/1.10.16/js/dataTables.semanticui.min.js'></script>")
		}

		imports += openTag(1, "script")
		imports += print(2, "\$(document).ready(function() {")
		imports += print(3, "\$('#${c.name.toLowerCase()}-form').DataTable()")
		imports += print(2, "})")
		imports += closeTag(1, "script")
		return imports
	}

	def form() {
		String form = ""

		form += print(1, "<>")

		return form
	}

	def buildTextField(IAttribute attr) {
		String field = ""

		if(f == SEMANTIC_UI) {

		} else if(f == BOOTSTRAP) {

		}

		return field
	}

	def closeTag(int indentation, String tag) {
		return openTag(indentation, "/${tag}")
	}

	def closeTag(String tag) {
		return closeTag(0, tag)
	}

	def openTag(int indentation, String tag, String content) {
		if(content != "")
			content = " ${content}"
		return print(indentation, "<${tag}${content}>")
	}

	def openTag(int indentation, String tag) {
		return openTag(indentation, tag, "")
	}

	def openTag(String tag) {
		return openTag(0, tag)
	}

	def print(String text) {
		return print(0, text)
	}

	def print(int indentation, String text) {
		String res = ""

		while(indentation > 0) {
			res += "\t"
			indentation--
		}

		if(text.substring(text.length() - 1) == "\n")
			return res + text

		return res + text + "\n"
	}

}